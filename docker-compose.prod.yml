version: '3.8'

services:
  postgres:
    image: postgres:18-alpine
    container_name: invoicing-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: invoicing_prod
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-prodpassword}
    ports:
      - "5433:5432"  # Different port for prod
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./invoicing-backend/migrations:/migrations
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d invoicing_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./invoicing-backend
      dockerfile: Dockerfile
      target: production  # Assume prod target in Dockerfile
    container_name: invoicing-backend-prod
    restart: always
    ports:
      - "8081:8080"
    environment:
      - DATABASE_URL=postgres://postgres:${DB_PASSWORD:-prodpassword}@postgres:5432/invoicing_prod?sslmode=disable
      - JWT_SECRET=${JWT_SECRET:-prod-jwt-secret-super-long-random}
      - PORT=8080
      - GIN_MODE=release
      - LOG_LEVEL=info
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./invoicing-backend:/app:ro  # Read-only for prod

  frontend:
    build:
      context: ./invoicing-frontend
      dockerfile: Dockerfile
      target: production
    container_name: invoicing-frontend-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"  # For HTTPS in prod
    environment:
      - VITE_API_URL=${VITE_API_URL:-https://api.example.com}
    depends_on:
      - backend
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl:ro  # For certs if needed

volumes:
  postgres_prod_data:
