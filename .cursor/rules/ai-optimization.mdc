---
alwaysApply: true
description: "AI Model Optimization for Sonnet 4, Grok 4, and Supernova"
---

# AI Model Optimization - SaaS Invoicing Project

## üß† AI Model Specialization Strategy

### Sonnet 4 (Claude) - The Architect üèóÔ∏è
**Strengths**: Deep analysis, structured thinking, comprehensive documentation

**Best Use Cases**:
- **Complex Refactoring**: Large-scale architecture changes across [invoicing-backend/](mdc:invoicing-backend/) and [invoicing-frontend/](mdc:invoicing-frontend/)
- **Code Reviews**: Comprehensive analysis of Go and React code quality and patterns
- **Database Design**: Schema optimization and migration strategies
- **Documentation**: Technical specs, API documentation, and architecture decisions
- **Security Analysis**: Vulnerability assessment and security best practices (RBAC, JWT, CORS)
- **Performance Analysis**: Database query optimization and React bundle optimization
- **RBAC System**: Organization-based multi-tenancy and permission analysis

**Optimal Prompts for Sonnet 4**:
```
"Analyze the entire invoicing service layer for potential improvements..."
"Review the database schema and suggest normalization opportunities..."
"Create comprehensive documentation for the authentication flow..."
"Identify security vulnerabilities in the current API design..."
"Analyze the RBAC middleware and organization context system..."
"Review the React frontend architecture and component structure..."
"Assess the multi-tenancy implementation and data isolation..."
```

### Grok 4 - The Innovator ‚ö°
**Strengths**: Creative problem-solving, rapid iteration, unconventional solutions

**Best Use Cases**:
- **Rapid Prototyping**: Quick feature implementation and MVP development
- **Creative Problem Solving**: Unique approaches to complex business logic
- **Performance Optimization**: Speed improvements and efficiency gains
- **API Design**: RESTful endpoint patterns and innovative data structures
- **Testing Strategies**: Creative test scenarios and edge cases
- **DevOps Innovation**: Docker optimizations and deployment strategies
- **Frontend Innovation**: React component patterns, TanStack Router optimization
- **UI/UX Solutions**: shadcn/ui component customization and responsive design

**Optimal Prompts for Grok 4**:
```
"Design a lightning-fast invoice generation system..."
"Create an innovative caching strategy for invoice data..."
"Build a unique API rate limiting solution..."
"Optimize Docker builds for maximum speed..."
"Create a revolutionary React component for invoice management..."
"Design an innovative real-time dashboard with live updates..."
"Build a creative solution for multi-organization data isolation..."
"Optimize TanStack Router for lightning-fast navigation..."
```

### Supernova - The Precision Expert üéØ
**Strengths**: Accuracy, reliability, detailed implementation, production-ready code

**Best Use Cases**:
- **Production Code**: Battle-tested, production-ready implementations
- **Database Operations**: Complex SQL queries and transaction management
- **Security Implementation**: JWT authentication, authorization, and validation
- **Testing & QA**: Comprehensive test coverage and quality assurance
- **Error Handling**: Robust error management and recovery strategies
- **Monitoring & Observability**: Logging, metrics, and alerting systems
- **RBAC Implementation**: Precise permission checking and organization context
- **React Forms**: Production-ready form validation with React Hook Form + Zod
- **API Integration**: Bulletproof Axios interceptors and error handling

**Optimal Prompts for Supernova**:
```
"Implement production-ready JWT authentication with refresh tokens..."
"Create comprehensive test suite for invoice creation flow..."
"Build robust error handling for database transactions..."
"Design monitoring system for invoice processing pipeline..."
"Implement bulletproof RBAC middleware with organization context..."
"Create production-ready React forms with Zod validation..."
"Build robust Axios interceptors with automatic token refresh..."
"Implement comprehensive error boundaries for React components..."
```

## üéØ Context-Aware AI Interaction

### Project Context for All AI Models

**Always provide this context when requesting assistance**:

```
Project: SaaS Invoicing System
Tech Stack: Go 1.25 + PostgreSQL 18 + Docker + GORM + React 19 + TanStack Router + shadcn/ui
Architecture: Clean Monolith with layered services + Modern React SPA
Key Files: 
- Backend API: [invoicing-backend/internal/handlers/](mdc:invoicing-backend/internal/handlers/)
- Frontend Pages: [invoicing-frontend/src/app/](mdc:invoicing-frontend/src/app/)
- Database Models: [invoicing-backend/internal/models/](mdc:invoicing-backend/internal/models/)
- Services: [invoicing-backend/internal/services/](mdc:invoicing-backend/internal/services/)
- API Docs: [docs/api-reference.md](mdc:docs/api-reference.md)
- Docker: [docker-compose.yml](mdc:docker-compose.yml), [Makefile](mdc:Makefile)
Current Status: [Brief description of what you're working on]
```

**Recent Achievements**:
- ‚úÖ Fixed 403 authentication errors with comprehensive RBAC system
- ‚úÖ Implemented organization-based multi-tenancy
- ‚úÖ Built complete frontend with React 19 + TanStack Router
- ‚úÖ Integrated shadcn/ui components for professional UI
- ‚úÖ Full CRUD operations for clients and invoices
- ‚úÖ Dashboard with live API data integration

### Intelligent Task Routing

#### üèóÔ∏è Use Sonnet 4 When:
- Need to understand the **entire system architecture**
- Planning **large refactoring efforts**
- Reviewing **code quality** across multiple files
- Creating **comprehensive documentation**
- Analyzing **security implications** of changes
- Designing **database schema migrations**

#### ‚ö° Use Grok 4 When:
- Need **quick prototypes** or proof of concepts
- Looking for **creative solutions** to technical challenges
- Optimizing for **speed and performance**
- Designing **innovative API patterns**
- Building **developer tools** and automation
- Solving **unique business logic** problems

#### üéØ Use Supernova When:
- Writing **production-critical code**
- Implementing **security features**
- Creating **comprehensive tests**
- Building **database transactions**
- Setting up **monitoring and logging**
- Handling **edge cases and error scenarios**

## üîÑ AI-Driven Development Workflow

### Phase 1: Planning & Analysis (Sonnet 4)
```
1. Architecture review and planning
2. Security analysis and threat modeling
3. Database design and migration strategy
4. Comprehensive documentation review
5. Code quality assessment
```

### Phase 2: Creative Implementation (Grok 4)
```
1. Rapid prototyping of new features
2. Performance optimization strategies
3. Innovative solution design
4. Quick iteration and experimentation
5. Creative problem-solving approaches
```

### Phase 3: Production Implementation (Supernova)
```
1. Robust, production-ready code
2. Comprehensive error handling
3. Security implementation
4. Testing and quality assurance
5. Monitoring and observability
```

## üõ°Ô∏è Technical Debt Prevention with AI

### Sonnet 4 - Code Quality Guardian
```
// Prompt template for code reviews:
"Review this Go service for:
1. SOLID principles adherence
2. Error handling patterns
3. Security vulnerabilities
4. Performance bottlenecks
5. Code maintainability

Context: [Provide specific service/handler/model file]
Business Logic: [Explain what the code should accomplish]"
```

### Grok 4 - Innovation Catalyst
```
// Prompt template for creative solutions:
"The current implementation has [specific problem].
Find an innovative solution that:
1. Improves performance by 2x
2. Reduces code complexity
3. Maintains backward compatibility
4. Uses Go 1.25 features effectively

Current code: [paste relevant code]
Constraints: [list any business/technical constraints]"
```

### Supernova - Production Hardener
```
// Prompt template for production readiness:
"Make this code production-ready:
1. Add comprehensive error handling
2. Implement proper logging
3. Add input validation
4. Include necessary tests
5. Add monitoring hooks

Code: [paste implementation]
Requirements: [list production requirements]"
```

## üìä AI Performance Metrics

### Track AI Effectiveness
- **Code Quality Score**: Measure before/after AI assistance
- **Development Speed**: Track feature completion time
- **Bug Reduction**: Monitor production issues
- **Test Coverage**: Ensure AI-generated code includes tests
- **Security Improvements**: Track vulnerability fixes

### AI Feedback Loop
```go
// Example: Track AI recommendations that worked well
type AIRecommendation struct {
    Model       string    // "sonnet4", "grok4", "supernova"
    Task        string    // "refactor", "implement", "optimize"
    Context     string    // File/feature being worked on
    Suggestion  string    // What the AI recommended
    Outcome     string    // "implemented", "modified", "rejected"
    Impact      string    // "positive", "neutral", "negative"
    CreatedAt   time.Time
}
```

## üöÄ Advanced AI Techniques

### Chain-of-Thought for Complex Problems
```
For complex features involving multiple components:

1. Sonnet 4: "Analyze the requirements and design the architecture"
2. Grok 4: "Find the most innovative implementation approach"  
3. Supernova: "Implement with production-quality code and tests"
4. Sonnet 4: "Review the final implementation for quality and security"
```

### Specialized Prompt Engineering
```
// Database optimization (Supernova):
"Optimize this PostgreSQL query for the invoice system:
- Current query: [paste SQL]
- Performance requirement: <100ms for 10K+ records
- Available indexes: [list current indexes]
- Business logic: [explain what query accomplishes]
Please provide: optimized query + recommended indexes + EXPLAIN plan"

// Go refactoring (Sonnet 4):
"Refactor this Go service to follow clean architecture:
- Current code: [paste service code]
- Issues: [list specific problems]
- Requirements: [list business requirements]
- Constraints: [API compatibility, etc.]
Please provide: refactored code + migration plan + tests"
```

## üéØ Context Engineering

### Maximize AI Effectiveness
1. **Always include relevant file paths** from the project
2. **Provide business context** for technical decisions
3. **Specify constraints** (performance, compatibility, security)
4. **Include error examples** when debugging
5. **Reference existing patterns** in the codebase

### Sample Context Block
```
Working on: Invoice creation API endpoint
Files involved: 
- [invoicing-backend/internal/handlers/invoice.go](mdc:invoicing-backend/internal/handlers/invoice.go)
- [invoicing-backend/internal/services/invoice.go](mdc:invoicing-backend/internal/services/invoice.go)
- [invoicing-backend/internal/models/invoice.go](mdc:invoicing-backend/internal/models/invoice.go)
- [invoicing-frontend/src/app/invoices.tsx](mdc:invoicing-frontend/src/app/invoices.tsx)
Current issue: [describe specific problem]
Business requirement: [explain what needs to be achieved]
Technical constraints: [list any limitations]
Performance target: [specify requirements]
RBAC context: [organization permissions, user role]
```

### Real-World Examples from Recent Work

**403 Error Fix (Sonnet 4 Analysis)**:
- **Problem**: Users getting 403 errors on all protected endpoints
- **Root Cause**: Missing organization membership in RBAC system
- **Solution**: Enhanced registration service + migration script
- **Files**: [invoicing-backend/internal/services/auth.go](mdc:invoicing-backend/internal/services/auth.go), [invoicing-backend/internal/middleware/rbac.go](mdc:invoicing-backend/internal/middleware/rbac.go)

**Frontend Implementation (Grok 4 Innovation)**:
- **Challenge**: Build complete React SPA with modern tooling
- **Solution**: React 19 + TanStack Router + shadcn/ui + Tailwind CSS 4
- **Files**: [invoicing-frontend/src/app/](mdc:invoicing-frontend/src/app/), [invoicing-frontend/src/components/](mdc:invoicing-frontend/src/components/)

**Production RBAC (Supernova Precision)**:
- **Requirement**: Bulletproof multi-tenant security
- **Implementation**: Organization context + role permissions + subscription limits
- **Files**: [invoicing-backend/internal/middleware/rbac.go](mdc:invoicing-backend/internal/middleware/rbac.go), [invoicing-backend/internal/models/role.go](mdc:invoicing-backend/internal/models/role.go)